name: Cypress E2E Tests

on:
  pull_request:
  push:
    branches: [main, dev]

jobs:
  cypress:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # pnpm + Node
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: 18 # Or your preferred Node.js version
          cache: 'pnpm'

      # ───────── Install Dependencies ─────────
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile # Or just `pnpm install` if you don't use frozen-lockfile

      # ───────── Build Application ─────────
      - name: Build application
        run: pnpm build

      # ───────── Serve in production mode ─────────
      - name: Start Next.js server for E2E tests
        run: pnpm start -p 3000 & # Start the server in the background
        env:
          # Add any necessary environment variables for your Next.js app to run in CI
          DATABASE_URL: "postgresql://user:pw@localhost:5432/db" # Example dummy values
          NEXTAUTH_SECRET: "ci-secret"
          RESEND_API_KEY: "dummy"
          GOOGLE_CLIENT_ID: "dummy"
          GOOGLE_CLIENT_SECRET: "dummy"
          # ... any other env vars your app needs to start successfully

      # Wait until server responds on port 3000
      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3000 --timeout 120000

      # ───────── Run Cypress Tests ─────────
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          # --- KEY FIXES HERE ---
          # 1. We already installed pnpm dependencies in 'Install dependencies' step.
          #    However, the cypress-io action expects to potentially run an install command.
          #    Since pnpm install handles the cypress package, we just need to ensure
          #    the binary is available.
          # 2. To ensure the Cypress binary is installed/verified, we can use the `install-command`
          #    to run `pnpm install` again or more specifically `npx cypress install`.
          #    The action typically runs `npm install` by default, which is wrong for pnpm.
          #    Setting an explicit `install-command` helps.
          # 3. Cache path for Cypress binary needs to be handled by the cypress-io action itself.
          #    It usually handles its own caching for the binary, so no separate `actions/cache` for Cypress is needed.
          install-command: pnpm install # Tells Cypress action to use pnpm for installation
          build: pnpm build # Not strictly necessary if you build in a prior step, but harmless
          start: pnpm start -p 3000 # This will run in the background by the Cypress action.
                                    # REMOVED `&` here because the `start` option of the action handles backgrounding.
                                    # This also allows the action to gracefully shut down the server.
          wait-on: 'http://localhost:3000' # Cypress action has its own `wait-on` parameter
          wait-on-timeout: 120 # In seconds, matches your 120000ms
          # The rest of your Cypress options, e.g.:
          browser: chrome
          # spec: './cypress/e2e/**/*.cy.js' # Uncomment and adjust if you need specific specs

      # If you want to capture screenshots/videos on failure (recommended)
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos